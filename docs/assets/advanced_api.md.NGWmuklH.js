import{_ as a,c as s,o as e,V as n}from"./chunks/framework.--NMbU3Q.js";const g=JSON.parse('{"title":"Api Reference","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/api.md","filePath":"advanced/api.md"}'),i={name:"advanced/api.md"},t=n(`<h1 id="api-reference" tabindex="-1">Api Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;Api Reference&quot;">​</a></h1><p>This section contains a description and example code for every - single function, and type, in UltraViolet. Feel free to scroll and find the function you need.</p><h1 id="engine" tabindex="-1">Engine: <a class="header-anchor" href="#engine" aria-label="Permalink to &quot;Engine:&quot;">​</a></h1><h2 id="createelement" tabindex="-1">CreateElement <a class="header-anchor" href="#createelement" aria-label="Permalink to &quot;CreateElement&quot;">​</a></h2><p><code>UltraViolet.CreateElement()</code></p><p><code>(className: string | component, objectConfig: element)</code></p><p><code>-&gt; META_DATA (Element Class)</code></p><pre><code>- Creates an element. Takes either a className, or a component in,
 with a configuration file. Returns the element class.
</code></pre><h2 id="createfragmentation" tabindex="-1">CreateFragmentation <a class="header-anchor" href="#createfragmentation" aria-label="Permalink to &quot;CreateFragmentation&quot;">​</a></h2><p><code>UltraViolet.CreateFragmentation()</code></p><p><code>(data: {className: string | component, objectConfig: element})</code></p><p><code>-&gt; META_DATA (Element Class)</code></p><pre><code>- Creates a fragment. Like Elements, but stored in an array.
</code></pre><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p><code>UltraViolet.Setup()</code></p><p><code>(settings: uvSettings?)</code></p><p><code>-&gt; META_DATA (Engine Class)</code></p><pre><code>- Changes the configuration files.
</code></pre><h1 id="element" tabindex="-1">Element <a class="header-anchor" href="#element" aria-label="Permalink to &quot;Element&quot;">​</a></h1><h2 id="construct" tabindex="-1">Construct <a class="header-anchor" href="#construct" aria-label="Permalink to &quot;Construct&quot;">​</a></h2><p><code>Element:Construct()</code></p><p><code>(constructor: instance?)</code></p><p><code>-&gt; instance?</code></p><pre><code>- Renders the object to the screen.
</code></pre><h2 id="constructfragment" tabindex="-1">ConstructFragment <a class="header-anchor" href="#constructfragment" aria-label="Permalink to &quot;ConstructFragment&quot;">​</a></h2><p><code>Element:ConstructFragment()</code></p><p><code>(constructor: instance?)</code></p><p><code>-&gt; instance?</code></p><pre><code>- Renders the fragments to the screen.
</code></pre><h1 id="animation" tabindex="-1">Animation <a class="header-anchor" href="#animation" aria-label="Permalink to &quot;Animation&quot;">​</a></h1><h2 id="transitionnew" tabindex="-1">TransitionNew <a class="header-anchor" href="#transitionnew" aria-label="Permalink to &quot;TransitionNew&quot;">​</a></h2><p><code>Animation.Transition.new()</code></p><p><code>(data: transition?)</code></p><p><code>-&gt; transition</code></p><pre><code>- Creates a transition from the set data.
</code></pre><h2 id="animationnew" tabindex="-1">AnimationNew <a class="header-anchor" href="#animationnew" aria-label="Permalink to &quot;AnimationNew&quot;">​</a></h2><p><code>Animation.new()</code></p><p><code>(data: {[string]: any}, transition: Transition)</code></p><p><code>-&gt; animation</code></p><pre><code>- Creates an animation from the set data.
</code></pre><h2 id="animationedit" tabindex="-1">AnimationEdit <a class="header-anchor" href="#animationedit" aria-label="Permalink to &quot;AnimationEdit&quot;">​</a></h2><p><code>Animation:Edit()</code></p><p><code>(replaceEntireOfPrevious: boolean, canUpdateValues: boolean, callbackArgs: {data: {[string]: any}?, transition: Transition?})</code></p><p><code>-&gt; nil</code></p><pre><code>- Edits the current animation during runtime.
</code></pre><h2 id="animationplay" tabindex="-1">AnimationPlay <a class="header-anchor" href="#animationplay" aria-label="Permalink to &quot;AnimationPlay&quot;">​</a></h2><p><code>Animation:Play()</code></p><p><code>()</code></p><p><code>-&gt; nil</code></p><pre><code>- Plays an animation.
</code></pre><h2 id="andthen" tabindex="-1">AndThen <a class="header-anchor" href="#andthen" aria-label="Permalink to &quot;AndThen&quot;">​</a></h2><p><code>Animation:AndThen()</code></p><p><code>(callback: () -&gt; ())</code></p><p><code>-&gt; nil</code></p><pre><code>- Creates a callback function that will be ran after Animation:Play().
</code></pre><h1 id="component" tabindex="-1">Component <a class="header-anchor" href="#component" aria-label="Permalink to &quot;Component&quot;">​</a></h1><h2 id="create" tabindex="-1">Create <a class="header-anchor" href="#create" aria-label="Permalink to &quot;Create&quot;">​</a></h2><p><code>Component:Create()</code></p><p><code>(componentName: string)</code></p><p><code>-&gt; component</code></p><pre><code>- Creates a component.
</code></pre><h2 id="setstate" tabindex="-1">SetState <a class="header-anchor" href="#setstate" aria-label="Permalink to &quot;SetState&quot;">​</a></h2><p><code>Component:SetState()</code></p><p><code>(data: {[string]: any} | (state: any) -&gt; ({[string]: any}))</code></p><p><code>-&gt; {state}</code></p><pre><code>- Creates states / Creates a new state.
</code></pre><h2 id="getstates" tabindex="-1">GetStates <a class="header-anchor" href="#getstates" aria-label="Permalink to &quot;GetStates&quot;">​</a></h2><p><code>Component:GetStates()</code></p><p><code>()</code></p><p><code>-&gt; {state}</code></p><pre><code>- Returns all current appended states.
</code></pre><h2 id="getstatefromname" tabindex="-1">GetStateFromName <a class="header-anchor" href="#getstatefromname" aria-label="Permalink to &quot;GetStateFromName&quot;">​</a></h2><p><code>Component:GetStateFromName()</code></p><p><code>(stateName: string)</code></p><p><code>-&gt; any | nil</code></p><pre><code>- Returns the state given from the state name.
</code></pre><h2 id="getstatesfromvalue" tabindex="-1">GetStatesFromValue <a class="header-anchor" href="#getstatesfromvalue" aria-label="Permalink to &quot;GetStatesFromValue&quot;">​</a></h2><p><code>Component:GetStatesFromValue()</code></p><p><code>(stateValue: any)</code></p><p><code>-&gt; {any} | nil</code></p><pre><code>- Returns an array of states based on a value.
</code></pre><h2 id="removestate" tabindex="-1">RemoveState <a class="header-anchor" href="#removestate" aria-label="Permalink to &quot;RemoveState&quot;">​</a></h2><p><code>Component:RemoveState()</code></p><p><code>(stateName: string)</code></p><p><code>-&gt; nil</code></p><pre><code>- Removes a state based off the state name.
</code></pre><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tokenExchange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[string]: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UVSettings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	tokenExchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: tokenExchange?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Transition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	reverses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	repeatCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	easingStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Enum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EasingStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	easingDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Enum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EasingDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UVAnim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	propertyChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {[string]: any},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		reverses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		repeatCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		easingStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Enum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EasingStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		easingDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Enum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EasingDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	objects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {Instance},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[string]: any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}?,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Element?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}?,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[string]: any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}?,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Animations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}?,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}?,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	onConstruction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Instance) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,88),p=[t];function l(h,r,o,d,c,k){return e(),s("div",null,p)}const m=a(i,[["render",l]]);export{g as __pageData,m as default};
